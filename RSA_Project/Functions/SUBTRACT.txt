static string sub(string number1, string number2)
            {
                StringBuilder result = new StringBuilder();
                // x and y holds the values of number1 and number2 as integers  
                int x = 0;
                Int32.TryParse(number1, out x);
                int y = 0;
                Int32.TryParse(number2, out y);
                //if both strings are equal in value
                if (number1 == number2)
                {
                    return ("0");
                }
                //if both strings are different then check lentgh and value
                else
                {
                    //if num2 is longer than num1 then swap
                    // num1 should be the longest one
                    if (number2.Length > number1.Length)
                    {
                        string temp = number2;
                        number2 = number1;
                        number1 = temp;
                    }
                    //if number2 is larger than number1 then swap them
                    else if (number1.Length == number2.Length)
                    {
                        if (y > x)
                        {
                            int temp = y;
                            y = x;
                            x = temp;
                        }
                        //number1 = x.ToString();
                        //number2 = y.ToString();
                    }
                    int num1_len = number1.Length;//O(1)
                    int num2_len = number2.Length;//O(1)
                    int diff_len = num1_len - num2_len;
                    int borrow = 0;
                    //step1 subtract num1 from num2 until the length of num2 which is the shortest
                    for (int i = num2_len - 1; i >= 0; i--)
                    {
                        int diff = (((int)number1[i + diff_len] - (int)'0') - ((int)number2[i] - (int)'0') - borrow);
                        if (diff < 0)
                        {
                            diff += 10;
                            borrow = 1;
                        }
                        else
                        {
                            borrow = 0;
                        }
                        /////////????????????????????????????///////
                        result.Append(diff.ToString());
                    }
                    //step2 accumalate rest bits from num1 which is the longest one to the result
                    for (int i = diff_len - 1; i >= 0; i--)
                    {
                        if (number1[i] == '0' && borrow > 0)
                        {
                            result.Append("9");
                            continue;
                        }
                        int diff = (((int)number1[i] - (int)'0') - borrow);
                        if (i > 0 || diff > 0)
                        {
                            ///////////////??????????????///////
                            result.Append(diff.ToString());
                        }
                        borrow = 0;
                    }
                    string result_builder = result.ToString();
                    char[] newresult = result_builder.ToCharArray();
                    Array.Reverse(newresult);
                    StringBuilder final_result = new StringBuilder();
                    for (int i = 0; i < newresult.Length; i++)
                    {
                        if (newresult[i] == '0')
                        {
                            newresult[i] = '$';
                        }
                        else
                        {
                            break;
                        }
                    }
                    for (int i = 0; i < newresult.Length; i++)
                    {
                        if (newresult[i] != '$')
                        {
                            final_result.Append(newresult[i]);
                        }
                    }
                    return final_result.ToString();
                    //return new string(newresult);
                    //return result;
                }
            }