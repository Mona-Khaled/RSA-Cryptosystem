static int equallystrings(ref string number1,ref string number2)
            {
                int num1_length = number1.Length;  //O(1)
                int num2_length = number2.Length;   //O(1)
                //both strings must be equal in length
                if (num1_length > num2_length)  //O(1)
                {
                    number2 = number2.PadLeft(num1_length, '0');  //O(1) //shift the string from left and put 0's according to the biggest lenght
                    return number2.Length;  //O(1)
                }
                else if (num1_length < num2_length)  //O(1)
                    number1 = number1.PadLeft(num2_length, '0');  //O(1)
                return number1.Length;  //O(1) //return the number1Lenght when length1 >= length2

            }
          static public string mul(string number1, string number2)
            {
                //function that return the length after equalling them
                int num_length = equallystrings(ref number1,ref number2); //O(1)
                int mid = num_length / 2;  //O(1)
                //base case
                if (num_length == 1) //O(1)
                {
                    return (((number1[0]) - '0') * ((number2[0]) - '0')).ToString();  //O(1)
                }
                else if (num_length == 0) //O(1)
                {
                    return "0";
                }
                //divide step
                string a = number1.Substring(0, mid);  //O(N)
                string b = number1.Substring(mid);  //O(N)
                string c = number2.Substring(0, mid);  //O(N)
                string d = number2.Substring(mid);  //O(N)
                //conquer step
                string ac = mul(a, c);  //recursive step //T(N/2)
                string bd = mul(b, d);  //recursive step //T(N/2)
                string z = mul(add(a, b), add(c, d));  //recursive step //T(N/2)
                string firstTerm = add(ac, bd);  //O(N)
                string remainingTerm = sub(z, firstTerm);  //O(N)
                //combine step
                string ans = add(ac.PadRight((ac.Length + (num_length - mid) * 2), '0'), remainingTerm.PadRight((remainingTerm.Length + (num_length - mid)), '0')); //O(N)
                string finalAns = add(ans, bd); //O(N)
                return finalAns;
            }